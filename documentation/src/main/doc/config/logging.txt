[id="logging"]
=== Logging configuration

Unity uses the Log4j logging framework in version 2.x (note that the older version 1.x is much different).
Logging is configured in the +conf/log4j2.xml+ file. Other log file formats supported by Log4j may be alternatively 
used but we suggest to use the default XML format.

By default, log files are written to the the +logs/+ directory. 

The following example config file configures logging so that log files are 
rotated daily. The example contains inline explanations in comments.

[source,xml]
-------------------
<?xml version="1.0" encoding="UTF-8"?>
<Configuration monitorInterval="30" status="warn">
  <!-- 
    What to log?
    Levels in order of verbosity: FATAL, ERROR, WARN, INFO, DEBUG, TRACE
  -->
  <Loggers>
    <!-- Default log level -->
    <Root level="INFO">
      <!-- Default appender specifies where to log by default 
           (can be changed per logger) -->
      <AppenderRef ref="LOGFILE"/>
    </Root>
  
    <!-- Everything produced by Unity (unless overwritten below) -->
    <Logger name="unity.server" level="DEBUG"/>

    <!-- Loading of any configuration -->
    <Logger name="unity.server.config" level="INFO"/>

    <!-- Persistence subsystem -->
    <Logger name="unity.server.db" level="INFO"/>

    <!-- Web subsystem -->
    <!-- <Logger name="unity.server.web" level="INFO"/> -->
  </Loggers>
  
  
  <!-- Where to log? -->
  <Appenders>
    <Console name="CONSOLE">
      <PatternLayout pattern="%d{ISO8601} [%t] %-5p %c: %equals{%1x}{[]}{}%m%n"/>
    </Console>
    
    <RollingRandomAccessFile name="LOGFILE" 
        fileName="/var/log/unity-idm/unity-server.log" 
        filePattern="/var/log/unity-idm/unity-server.log.%d{yyyy-MM-dd}">
        
      <PatternLayout pattern="%d{ISO8601} [%t] %-5p %c: %equals{%1x}{[]}{}%m%n"/>
      <Policies>
        <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
      </Policies>
      <DefaultRolloverStrategy/>
    </RollingRandomAccessFile>
  </Appenders>
</Configuration>
-------------------

[NOTE]
===========
In Log4j, the log rotation frequency is controlled by the DatePattern. Check 
https://logging.apache.org/log4j/2.x/manual/appenders.html
for the details, search for +filePattern+.
===========

For more info on controlling the logging we refer to the log4j documentation:
  
  - https://logging.apache.org/log4j/2.x/manual/index.html[Introduction]
  - https://logging.apache.org/log4j/2.x/manual/appenders.html[Where to log - appenders]
  - https://logging.apache.org/log4j/2.x/manual/layouts.html[Log entry format - layouts]
 

==== Logger categories, names and levels

Logger names are hierarchical. In Unity, prefixes are used (e.g. "unity.server.con") 
to which the Java class name is appended. The most common logging prefixes are:

- +unity.server+ - general server messages
- +unity.server.config+ - configuration parsing and loading
- +unity.server.db+ - database related
- +unity.server.web+ - web interface related
- +unity.server.saml+ - SAML subsystem related
- +unity.server.ldap+ - upstream LDAP IdP related 
- +unity.server.ws+ - SOAP (web service) stack related
- +unity.server.externaltranslation+ - messages connected with the translation of any upstream IdP 
data to the Unity format.
 
NOTE: The default log4j configuration file always contains a comprehensive and up to date list of all prefixes 
used in Unity.

Therefore the logging output produced can be controlled in a fine-grained manner. 
Log levels in Log4j are (in increasing level of severity): 

- +TRACE+ on this level _huge_ pieces of unprocessed information are dumped,
- +DEBUG+ admin-friendly, verbose information, useful for hunting problems, 
- +INFO+ standard information, not much output,
- +WARN+ warnings are logged when something went wrong (so it should be investigated), but recovery was possible,
- +ERROR+ something went wrong and operation probably failed, 
- +FATAL+ something went really wrong - this is used very rarely for critical situations like overall server failure.


[NOTE]
===========
The best way to discover what is the name of the interesting category is to turn on the general DEBUG logging 
for a while. Then interesting events can be seen and subsequently the logging configuration can be fine tuned
to only show them.
===========
