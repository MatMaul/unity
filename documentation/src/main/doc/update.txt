== Update

This section covers a general update procedure. Make sure to read version specific update instruction too: 
<<ver-update>>. If you are updating with a revision release (change of the version number after the last dot only, 
e.g. 1.3.0 -> 1.3.1 or 9.11.2 -> 9.11.5) you can skip to the simplified <<revision-update>> instruction.

The update is a potentially dangerous operation, therefore we suggest to take two precautions:

. *MANDATORY* make a full database backup _before_ starting the update.
. *SUGGESTED* make a test drive. To do this you need a separate instance of Unity service, with database copied from 
the production one. Update it first and only if everything goes OK, proceed with an update of the production instance.

After the precautions are done the update instructions are following.

When using the +.tar.gz+: 

. Install the updated version in a separate directory as in the case of a fresh installation.
. Configure it with the settings of the running instance. Copy the config files of the old version and 
(if required) made any version specific modifications which are given below. 
. Stop the old service.
. Start the new instance.
. Carefully check log files for any errors or warnings.
. If needed reconfigure startup scripts to start the updated service, as well as update the +PATH+ variable to use
new Unity binaries location. It is a good practice to have a symbolic link to the actual Unity installation directory
that is used in the +PATH+ and startup scripts. Then it is possible to simply change its target to the updated 
service directory.

If using the RPM: 

. Stop the old service.
. Update the RPM using platform tools (usually +yum+).
. Check if any configuration files needs to be updated (see below, also search for +.rpmnew+ files in /etc/unity-idm).
. Start the new service.
. Carefully check log files for any errors or warnings.

[NOTE] 
The database dump can be created and loaded from the Web Admin UI, from the _Server maintenance_ tab. It can be used 
to transfer the Unity state between instances, can be also used as a backup tool. However in the upgrade case
it is strongly suggested to make a regular database dump.

[[revision-update]]
=== Revision (bugfix) update

From time to time a revision version of Unity is released. Such version is marked with a change of the last 
number in the distribution version only. When installing such revision release a simplified procedure can be
taken. Database backup is advised as always, though in revision update the risk is minimal - revision releases
typically do not introduce database changes.
  
When using the +.tar.gz+: 

. Unpack the updated release
. Stop the server
. Replace the contents of the server's +lib/+ directory with the contents of the +lib/+ directory of the updated package.
. Start the server

When using RPM distribution it is enough to update the package with your package manager and restart the server. 

[[ver-update]]
=== Version specific update instructions

[NOTE]
The last component in the version string is irrelevant for the following instructions. For instance instructions
for the 1.2.0->1.3.0 applies also to 1.2.0->1.3.1 and all other 1.3.x versions.

==== From 1.x to 2.0.0

Information about major update from 1.x version to the 2.0.0 version is provided in a separate document under 
<<update-howto-v2.txt#,this address>>.

==== From 2.1.0 to 2.2.0

Version 2.2.0 changes the default organization of configuration files by introducing modules, which can be enabled
with a single statement in the main configuration file. We suggest moving to this approach, 
however the old style of configuration, where all components are directly defined in +unityServer.conf+ 
are still fully supported. In fact the difference is merely in the default organization of configuration files.
 
==== From 2.2.0 to 2.3.0

No configuration changes or manual steps are neccessary

==== From 2.3.0 to 2.4.0

Update should be straightforward as no configuration syntax changes were introduced. Note however that 
there were few important changes in the way how default configuration and server initialization works:

. There is a new +sys:password+ credential that is always defined. Its settings are read only. It is the default
credential: by default configured on initial credential requirements and authenticators. 
It is always used for the initialAdmin user credential (so far an ad-hoc credential was generated).
. Default credentials configuration was moved to its own configuration module +credential.module+ 
and includes only the certificate credential definition. 
. There is a new attributeType config module, activating a new initialization script: 
+scripts/defaultAttributeTypeInitializer.groovy+. The script loads predefined attribute types. You can enable this 
when updating old configuration. The attribute types may be alternatively loaded from Admin UI in Schema management.
. There is a new configuration module  +oauthAuthenticator.module+. It loads a standard configuration of OAuth
web authenticator. The default configuration provided in +conf/modules/oauth/remoteOAuth.properties+ is a good starting 
template.

==== From 2.4.0 to 2.5.0
 
Configuration syntax change

. New email confirmation consumer name = +EmailConfirmation+
. There is new message template config param +notificationChannel+. 
All message templates (except Generic) from db after update will have set default_email channel.
. Config key unityServer.core.confirmationRequestLimit now is unityServer.core.emailConfirmationRequestLimit
. As Unity moved to Vaadin 8 all custom themes needs to be re-compiled. In some cases (typically more advanced ones) 
themes may also require a small update, as upstream Vaadin Valo theme was also updated, and some of the components 
has changed.

