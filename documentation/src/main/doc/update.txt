== Update

This section covers a general update procedure. Make sure to read version specific update instruction too: 
<<ver-update>>. If you are updating with a revision release (change of the version number after the last dot only, 
e.g. 1.3.0 -> 1.3.1 or 9.11.2 -> 9.11.5) you can skip to the simplified <<revision-update>> instruction.

The update is a potentially dangerous operation, therefore we suggest to take two precautions:

. *MANDATORY* make a full database backup _before_ starting the update.
. *SUGGESTED* make a test drive. To do this you need a separate instance of Unity service, with database copied from 
the production one. Update it first and only if everything goes OK, proceed with an update of the production instance.

After the precautions are done the update instructions are following.

When using the +.tar.gz+: 

. Install the updated version in a separate directory as in the case of a fresh installation.
. Configure it with the settings of the running instance. Copy the config files of the old version and 
(if required) made any version specific modifications which are given below. 
. Stop the old service.
. Start the new instance.
. Carefully check log files for any errors or warnings.
. If needed reconfigure startup scripts to start the updated service, as well as update the +PATH+ variable to use
new Unity binaries location. It is a good practice to have a symbolic link to the actual Unity installation directory
that is used in the +PATH+ and startup scripts. Then it is possible to simply change its target to the updated 
service directory.

If using the RPM: 

. Stop the old service.
. Update the RPM using platform tools (usually +yum+).
. Check if any configuration files needs to be updated (see below, also search for +.rpmnew+ files in /etc/unity-idm).
. Start the new service.
. Carefully check log files for any errors or warnings.

[NOTE] 
The database dump can be created and loaded from the Web Admin UI, from the _Server maintenance_ tab. It can be used 
to transfer the Unity state between instances, can be also used as a backup tool. However in the upgrade case
it is strongly suggested to make a regular database dump.

[[revision-update]]
=== Revision (bugfix) update

From time to time a revision version of Unity is released. Such version is marked with a change of the last 
number in the distribution version only. When installing such revision release a simplified procedure can be
taken. Database backup is advised as always, though in revision update the risk is minimal - revision releases
typically do not introduce database changes.
  
When using the +.tar.gz+: 

. Unpack the updated release
. Stop the server
. Replace the contents of the server's +lib/+ directory with the contents of the +lib/+ directory of the updated package.
. Start the server

When using RPM distribution it is enough to update the package with your package manager and restart the server. 

[[ver-update]]
=== Version specific update instructions

[NOTE]
The last component in the version string is irrelevant for the following instructions. For instance instructions
for the 1.2.0->1.3.0 applies also to 1.2.0->1.3.1 and all other 1.3.x versions.

==== From 1.x to 2.0.0

Information about major update from 1.x version to the 2.0.0 version is provided in a separate document under 
<<update-howto-v2.txt#,this address>>.

==== From 2.1.0 to 2.2.0

Version 2.2.0 changes the default organization of configuration files by introducing modules, which can be enabled
with a single statement in the main configuration file. We suggest moving to this approach, 
however the old style of configuration, where all components are directly defined in +unityServer.conf+ 
are still fully supported. In fact the difference is merely in the default organization of configuration files.
 
==== From 2.2.0 to 2.3.0

No configuration changes or manual steps are neccessary

==== From 2.3.0 to 2.4.0

Update should be straightforward as no configuration syntax changes were introduced. Note however that 
there were few important changes in the way how default configuration and server initialization works:

. There is a new +sys:password+ credential that is always defined. Its settings are read only. It is the default
credential: by default configured on initial credential requirements and authenticators. 
It is always used for the initialAdmin user credential (so far an ad-hoc credential was generated).
. Default credentials configuration was moved to its own configuration module +credential.module+ 
and includes only the certificate credential definition. 
. There is a new attributeType config module, activating a new initialization script: 
+scripts/defaultAttributeTypeInitializer.groovy+. The script loads predefined attribute types. You can enable this 
when updating old configuration. The attribute types may be alternatively loaded from Admin UI in Schema management.
. There is a new configuration module  +oauthAuthenticator.module+. It loads a standard configuration of OAuth
web authenticator. The default configuration provided in +conf/modules/oauth/remoteOAuth.properties+ is a good starting 
template.
. As Unity moved to Vaadin 8 all custom themes needs to be re-compiled. In some cases (typically more advanced ones) 
themes may also require a small update, as upstream Vaadin Valo theme was also updated, and some of the components 
has changed.

==== From 2.4.0 to 2.5.0
 
Version 2.5.0 changes significantly DB schema. The migration is automatic, however making a backup and 
performing a trial migration on a DB copy first is highly recommended.

As upstream Vaadin version was updated, it is suggested to rebuild custom themes and widgetsets if are used.

==== From 2.5.0 to 2.6.0
 
Endpoint configuration argument syntax change. (List<AuthenticationOptionDescription>  -> List<String> with contains authenticator of authentication flow name)
Name of idpentry authn option change. (idpentry_AuthenticatorName.Option -> idpentry_AuthnFlowName.AutheticatorName.Option)

===== Overview

Up to this version notification channel configuration (which was BTW quite dummy as only a single option was possible 
-- the default email channel) was spread around various components. 
From this version it is only configured as a property of a message template, as typically message template is 
different depending on a channel (SMS or email). Migration sets the +default_email+ 
channel for all existing message templates in DB. In effect channel configuration was removed from other 
places in the system:

. registration forms, enquiry forms
. invitations
. password credential reset settings (the +securityCodeMsgTemplate+ property is no longer supported)

Note that this may also influence REST calls if such elements are created automatically.
 
The formerly separate configuration of email attribute and identity confirmations was removed. Instead those settings
can now be made in particular attribute type or identity type configuration. 



===== Configuration syntax changes

. Main +unityServer.conf+ key +unityServer.core.confirmationRequestLimit+ was renamed to 
+unityServer.core.emailConfirmationRequestLimit+
. The message template consumer called so far +PasswordResetCode+ was renamed to +EmailPasswordResetCode+. 
. The message template consumer called so far +Confirmation+ was renamed to +EmailConfirmation+. 
. All message templates must have a new +notificationChannel+ property set. For existing templates channel can be safely set to
+default_email+ (for new one also +default_sms+ is an option).
. _unlikely to beused_ The 'hold on' feature of SAML and OAuth IdP endpoints was dropped. The endpoint's 
configuration option ending with +.assumeForceOnSessionClash+ is not supported anymore and should 
be removed from configurations. The current behaviour is as up to now with this setting set to true (what was the default).  
. _unlikely to be used_ Password credential configuration was significantly changed due to enhancements in the password reset functionality and
introduction of genearl security factor setting. If password credential is configured from a file it is suggested
create a new configuration on the AdminUI and extract the credential config from JSON dump.    

The following example shows an updated configuration of a template used when sending password rest code message:  

----
emailPasswordResetCode.subject.en=Credential reset code
emailPasswordResetCode.consumer=EmailPasswordResetCode
emailPasswordResetCode.notificationChannel=default_email
emailPasswordResetCode.type=HTML
emailPasswordResetCode.bodyFile.en=path/to/template/file.html
----

===== Other changes

. Email identities are now comapred fully case insensitvie.
. Registration form can now be created without any identity parameter. However to make it work at least one identity 
still needs to be set then -- with form automation (e.g. automatically derived from an attribute).
. Password history handling was fixed. Currently history of length 0 allows for updating password even to the same one 
that is changed. Password history of length 1 forbids only the current password on update, etc.
. For email attributes and identities modified by admin (typically in AdminUI) confirmation requests are never sent 
automatically. Instead, if this is needed (unlikely), admin needs to manually trigger sending the confirmation request.   
. For custom Groovy initialization script users only: package +pl.edu.icm.unity.stdext.credential+ was changed to
+pl.edu.icm.unity.stdext.credential.pass+, update the imports section.
